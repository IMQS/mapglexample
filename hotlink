#!/bin/bash

# WWWWWHAT.
# This ended up not working.
# Why?
# Because npm knows about symlinks, and after it follows one, it stops looking in the original tree.
# It's like a symlink disconnects the package resolve from the original hierarchy.

VENDOR=$1
SOURCE=$2
if [ "$VENDOR" == "-h" ] || [ "$VENDOR" == "--help" ] || [ "$VENDOR" == "" ] || [ "$SOURCE" == "" ]; then
    echo ""
    echo " hotlink @vendor ../../root/dir/of/vendor/packages"
    echo ""
    echo "  1st Parameter is the root name of your vendored packages, eg @vue"
    echo "  2nd Parameter is path to the root of your packages. Every package"
    echo "      must be inside a sub-directory here."
    exit 1
fi

PACKAGES=$(grep -o "$VENDOR/[^\"]\+" package.json)
#echo $PACKAGES
for P in $PACKAGES; do
    # $P is now, for example, @imqs/auth
    # We're also interested in just the pure package name, so we extract that too
    [[ $P =~ @imqs/(.+) ]]
    PURENAME=${BASH_REMATCH[1]}
    if [ $PURENAME == "" ]; then
        echo -e "\e[31mFailed to extract pure package name from '$P'\e[0m"
        exit 1
    fi
    INSTANCES=$(find node_modules -wholename "*/$P")
    NUM_INSTANCES=$(echo "$INSTANCES" | wc -l)
    if [ ! "$NUM_INSTANCES" == 1 ]; then
        echo -e "\e[33mWarning! There are multiple instances of $P.\e[0m"
        echo -e " This probably means that you have conflicting version of your vendored"
        echo -e " packages somewhere in your dependency tree."
        echo -e " The package locations are:\n$INSTANCES"
        echo -e " \e[33mOnly node_modules/$P will be symlinked.\e[0m"
    fi
    LINK_TARGET="$SOURCE/$PURENAME"
    if [ ! -d $LINK_TARGET ]; then
        echo -e "\e[31mSymlink target '$LINK_TARGET' does not exist\e[0m"
        exit 1
    fi
    LINK_SRC="node_modules/$P"
    echo -e "Symlinking \e[32m$LINK_SRC\e[0m -> \e[34m$LINK_TARGET\e[0m"
    
    if [ -L "$LINK_SRC" ] && [ -d "$LINK_SRC" ]; then
        # Already a symlink, so remove the link only
        rm $LINK_SRC
    else
        # Regular checkout - delete the directory tree
        rm -rf $LINK_SRC
    fi

    # We need the extra ../.. here on the target, because we're going in two levels deeper, into node_modules/@vendor
    ln -s ../../$LINK_TARGET $LINK_SRC
    #ln $LINK_TARGET $LINK_SRC

    # Remove node_modules from the target, so that when we do "npm run dev" on our local deployment, then we get only
    # the packages from our local node_modules directory.
    #echo "Removing $LINK_TARGET/node_modules"
    rm -rf "$LINK_TARGET/node_modules"
done